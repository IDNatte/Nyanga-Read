name: Build Ubuntu
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build packages on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.4

      - name: Install Node.js and Yarn
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          source "$NVM_DIR/nvm.sh"
          nvm install 18.16.0
          npm install -g yarn

      - name: Dependencies install Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-4.0 nodejs python3-venv glib-networking
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Load release metafile
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Retrieving URL
        id: get_release_info
        run: |
          value=$(cat release_url/release_url.txt)
          echo "::set-output name=upload_url::$value"

      - name: Version Update
        shell: bash
        run: |
          VERSION=$(jq -r '.version' package.json)
          RELEASE=$(jq -r '.releaseRef' docs/app/version.json)
          case "$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')" in
            linux)
              OS="linux"
              ;;
            windows)
              OS="windows"
              ;;
            *)
              OS="unknown"
              ;;
          esac
          cat << EOF > docs/app/version.json 
          {
            "currentVersion": "$VERSION",
            "releaseRef": "$RELEASE",
            "os": "$OS"
          }
          EOF
          case "$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')" in
            linux)
              echo "OS=linux" >> $GITHUB_ENV
              ;;
            windows)
              echo "OS=windows" >> $GITHUB_ENV
              ;;
            *)
              echo "OS=unknown" >> $GITHUB_ENV
              ;;
          esac
          echo "{\"version\": \"$VERSION\"}" > release.$OS.json

      - name: Install project dependencies
        run: yarn install

      - name: Build Svelte project
        run: yarn run svelte:build

      - name: Set up Python virtual environment
        run: |
          python3 -m venv .venv --upgrade-deps
          source .venv/bin/activate

      - name: Create log directory and file
        run: |
          mkdir -p log
          touch log/app.log

      - name: Upgrade pip and install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements/requirements-linux.txt

      - name: Build Nyanga-Read application
        run: pyinstaller --noconfirm --distpath nyanga scripts/specfile/Nyanga-Read-ubuntu.spec

      - name: Release assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./nyanga/Nyanga-Read-ubuntu
          asset_name: Nyanga-Read-ubuntu
          asset_content_type: application/octet-stream
